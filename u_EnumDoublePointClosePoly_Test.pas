unit u_EnumDoublePointClosePoly_Test;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  t_GeoTypes,
  u_EnumDoublePointClosePoly,
  i_EnumDoublePoint;

type
  TestTEnumDoublePointClosePoly = class(TTestCase)
  published
    procedure NoPoints;
    procedure OnePoint;
    procedure SimpleIfNeedAddPoint;
    procedure SimpleIfNoAddPoint;
  end;

implementation

uses
  u_GeoFun,
  u_EnumDoublePointsByArray;

procedure TestTEnumDoublePointClosePoly.NoPoints;
var
  VData: TArrayOfDoublePoint;
  VDataEnum: IEnumDoublePoint;
  VTestEnum:  IEnumDoublePoint;
  VPoint: TDoublePoint;
begin
  SetLength(VData, 0);
  VDataEnum := TEnumDoublePointsByArray.Create(@VData[0], Length(VData));
  VTestEnum := TEnumDoublePointClosePoly.Create(VDataEnum);
  CheckFalse(VTestEnum.Next(VPoint));
end;

procedure TestTEnumDoublePointClosePoly.OnePoint;
var
  VData: TArrayOfDoublePoint;
  VDataEnum: IEnumDoublePoint;
  VTestEnum:  IEnumDoublePoint;
  VPoint: TDoublePoint;
begin
  SetLength(VData, 1);
  VData[0].X := 1;
  VData[0].Y := 1;
  VDataEnum := TEnumDoublePointsByArray.Create(@VData[0], Length(VData));
  VTestEnum := TEnumDoublePointClosePoly.Create(VDataEnum);
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[0]));
  CheckFalse(VTestEnum.Next(VPoint));
end;

procedure TestTEnumDoublePointClosePoly.SimpleIfNeedAddPoint;
var
  VData: TArrayOfDoublePoint;
  VDataEnum: IEnumDoublePoint;
  VTestEnum:  IEnumDoublePoint;
  VPoint: TDoublePoint;
begin
  SetLength(VData, 3);
  VData[0].X := 1;
  VData[0].Y := 1;
  VData[1].X := 0;
  VData[1].Y := 1;
  VData[2].X := 1;
  VData[2].Y := 0;
  VDataEnum := TEnumDoublePointsByArray.Create(@VData[0], Length(VData));
  VTestEnum := TEnumDoublePointClosePoly.Create(VDataEnum);
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[0]));
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[1]));
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[2]));
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[0]));
  CheckFalse(VTestEnum.Next(VPoint));
end;

procedure TestTEnumDoublePointClosePoly.SimpleIfNoAddPoint;
var
  VData: TArrayOfDoublePoint;
  VDataEnum: IEnumDoublePoint;
  VTestEnum:  IEnumDoublePoint;
  VPoint: TDoublePoint;
begin
  SetLength(VData, 4);
  VData[0].X := 1;
  VData[0].Y := 1;
  VData[1].X := 0;
  VData[1].Y := 1;
  VData[2].X := 1;
  VData[2].Y := 0;
  VData[3].X := 1;
  VData[3].Y := 1;
  VDataEnum := TEnumDoublePointsByArray.Create(@VData[0], Length(VData));
  VTestEnum := TEnumDoublePointClosePoly.Create(VDataEnum);
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[0]));
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[1]));
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[2]));
  CheckTrue(VTestEnum.Next(VPoint));
  CheckTrue(DoublePointsEqual(VPoint, VData[0]));
  CheckFalse(VTestEnum.Next(VPoint));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTEnumDoublePointClosePoly.Suite);
end.

